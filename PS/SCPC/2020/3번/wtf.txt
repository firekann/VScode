#pragma GCC optimize("O3")
#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")
#define _USE_MATH_DEFINES
#include <bits/stdc++.h>
#define fastio                   \
    ios::sync_with_stdio(false); \
    cin.tie(nullptr)
#define X first
#define Y second
#define pb push_back
#define sz(x) (int)x.size()
#define all(x) x.begin(), x.end()
#define pii pair<int, int>
#define pll pair<ll, ll>
#define mid ((l + r) >> 1)

using namespace std;
typedef long long ll;
const int dx[] = {-1, 0, 1, 0, -1, 1, 1, -1};
const int dy[] = {0, 1, 0, -1, 1, 1, -1, -1};

int Answer, cnt;

void dfs(vector<vector<pii>> &edge, vector<vector<pii>> &memo, int pre_edge, int start, int pre, int cut)
{
    for (auto i : edge[pre_edge])
    {
        if (i.Y > pre)
        {
            if (memo[i.Y][pre_edge].X == -1 && memo[i.Y][pre_edge].Y == -1)
            {
                if (pre_edge < i.X)
                {
                    memo[i.Y][pre_edge].X = memo[i.Y][pre_edge].X == -1 ? cut + 1 : min(cut + 1, memo[i.Y][pre_edge].X);
                    memo[i.Y][pre_edge].Y = memo[i.Y][pre_edge].Y == -1 ? cut : min(cut, memo[i.Y][pre_edge].Y);
                }
                else
                {
                    memo[i.Y][pre_edge].X = memo[i.Y][pre_edge].X == -1 ? cut : min(cut, memo[i.Y][pre_edge].X);
                    memo[i.Y][pre_edge].Y = memo[i.Y][pre_edge].Y == -1 ? cut + 1 : min(cut + 1, memo[i.Y][pre_edge].Y);
                }
                dfs(edge, memo, i.X, start, i.Y, cut++);
            }
        }
    }
    return;
}

int main()
{
    fastio;
    int T, test_case;
    cin >> T;
    for (test_case = 0; test_case < T; test_case++)
    {
        Answer = 0;
        int n, k, m;
        cin >> n >> k >> m;
        vector<vector<pii>> edge(n + 1);
        for (int i = 0; i < k; i++)
        {
            int a, b;
            cin >> a >> b;
            edge[a].pb({b, i});
            edge[b].pb({a, i});
        }
        int ans = 0;
        vector<vector<pii>> memo(k, vector<pii>(n + 1, {-1, -1}));
        for (int i = 1; i <= n; i++)
        {
            dfs(edge, memo, i, i, -1, 0);
        }
        for (int i = 0; i < m; i++)
        {
            int a, b;
            cin >> a >> b;
            if (sz(edge[b]) == 0)
                ans--;
            else
            {
                if (b < edge[b][sz(edge[b]) - 1].X)
                    ans += memo[edge[b][sz(edge[b]) - 1].Y][a].X;
                else
                    ans += memo[edge[b][sz(edge[b]) - 1].Y][a].Y;
            }
        }

        for (int i = 0; i < k; i++)
        {
            cout << i << " : ";
            for (int j = 1; j <= n; j++)
            {
                cout << "( " << memo[i][j].X << ", " << memo[i][j].Y << " ) ";
            }
            cout << "\n";
        }

        Answer = ans;
        cout << "Case #" << test_case + 1 << endl;
        cout << Answer << endl;
    }

    return 0;
}